CREATE DATABASE BOOKSTORE;
USE BOOKSTORE;
CREATE TABLE BOOKS(
BOOK_ID INT PRIMARY KEY,
TITLE VARCHAR(100),
AUTHOR_ID INT,
PRICE FLOAT
);
INSERT INTO BOOKS (BOOK_ID, TITLE, AUTHOR_ID, PRICE) VALUES
(101, '1984', 1, 15.99),
(102, 'Animal Farm', 1, 9.99),
(103, 'Harry Potter and the Philosopher\'s Stone', 2, 25.50),
(104, 'Norwegian Wood', 3, 18.75),
(105, 'The Shining', 4, 22.40),
(106, 'The Alchemist', 5, 17.80);

CREATE TABLE AUTHOR(
AUTHOR_ID INT PRIMARY KEY,
NAME VARCHAR(50),
COUNTRY VARCHAR(50)
);
INSERT INTO AUTHOR (AUTHOR_ID, NAME, COUNTRY) VALUES
(1, 'George Orwell', 'United Kingdom'),
(2, 'J.K. Rowling', 'United Kingdom'),
(3, 'Haruki Murakami', 'Japan'),
(4, 'Stephen King', 'United States'),
(5, 'Paulo Coelho', 'Brazil'),
(6,'Frajer M','Japan');

CREATE TABLE SALES(
SALES_ID INT PRIMARY KEY,
BOOK_ID INT ,
QUANTITY INT,
S_DATE DATE
);
INSERT INTO SALES (SALES_ID, BOOK_ID, QUANTITY, S_DATE) VALUES
(1001, 101, 3, '2025-06-15'),
(1002, 103, 5, '2025-06-17'),
(1003, 106, 2, '2025-06-18'),
(1004, 104, 4, '2025-06-20'),
(1005, 102, 6, '2025-06-22'),
(1006, 105, 1, '2025-06-25'),
(1007, 103, 2, '2025-06-26'),
(1008, 106, 3, '2025-06-28');

select * from BOOKS;
SELECT * FROM AUTHOR;
SELECT * FROM SALES;


SELECT * FROM BOOKS AS B
JOIN AUTHOR AS A
ON B.AUTHOR_ID=A.AUTHOR_ID;

SELECT
B.BOOK_ID,
B.TITLE,
B.PRICE,
A.NAME AS AUTHOR_NAME,
A.COUNTRY
FROM
BOOKS AS B
JOIN AUTHOR AS A
ON B.AUTHOR_ID=A.AUTHOR_ID;

SELECT 
S.SALES_ID,
S.QUANTITY,
S.S_DATE,
B.TITLE AS BOOK_TITLE,
A.NAME AS AUTHOR_NAME 
FROM SALES AS S
JOIN BOOKS AS B
ON S.BOOK_ID=B.BOOK_ID
JOIN AUTHOR AS A
ON B.AUTHOR_ID=A.AUTHOR_ID;

SELECT SUM(QUANTITY) 
FROM SALES;

SELECT B.BOOK_ID,TITLE,sum(QUANTITY)*PRICE AS TOTAL_REVENUE
FROM SALES AS S
JOIN BOOKS AS B
ON S.BOOK_ID=B.BOOK_ID
GROUP BY B.BOOK_ID,TITLE;

SELECT 
A.NAME AS AUTHOR_NAME,
sum(S.QUANTITY) AS TOTAL_BOOKS_SOLD
FROM SALES AS S
JOIN BOOKS AS B
ON S.BOOK_ID=B.BOOK_ID
JOIN AUTHOR AS A
ON B.AUTHOR_ID=A.AUTHOR_ID
GROUP BY A.NAME;
-- HAVING SUM(S.QUANTITY)>100;

SELECT AVG(QUANTITY)
FROM SALES;

SELECT 
B.BOOK_ID,
B.TITLE,
SUM(S.QUANTITY) AS TOTAL_SOLD
FROM BOOKS AS B
JOIN SALES AS S
ON S.BOOK_ID=B.BOOK_ID
GROUP BY
B.BOOK_ID,B.TITLE
HAVING SUM(S.QUANTITY)>
(SELECT AVG(QUANTITY) FROM SALES);

SELECT 
A.NAME AS AUTHOR_NAME,
AVG(B.PRICE)AS AVG_PRICE
FROM BOOKS AS B
JOIN AUTHOR AS A ON B.AUTHOR_ID=A.AUTHOR_ID
GROUP BY A.NAME
ORDER BY AVG_PRICE DESC
LIMIT 1;


SELECT 
  TITLE,
  PRICE,
  CASE 
    WHEN PRICE >= 20 THEN 'EXPENSIVE'
    WHEN PRICE >= 15 THEN 'MODERATE'
    ELSE 'CHEAP'
  END AS PRICE_CATEGORY
FROM BOOKS;

CREATE VIEW  VIEW1 AS
SELECT * FROM BOOKS;
SELECT * FROM VIEW1;
CREATE VIEW  VIEW2 AS
SELECT * FROM AUTHOR;
SELECT * FROM VIEW2;
CREATE VIEW  VIEW3 AS
SELECT * FROM SALES;
SELECT * FROM VIEW3;


SELECT 
 B.BOOK_ID,
 B.TITLE,
 A.AUTHOR_ID,
 A.NAME AS AUTHOR_NAME,
 S.SALES_ID,
 S.QUANTITY
FROM BOOKS AS B
LEFT JOIN AUTHOR AS A ON B.AUTHOR_ID=A.AUTHOR_ID
LEFT JOIN SALES AS S ON B.BOOK_ID=S.BOOK_ID
UNION
SELECT
 B.BOOK_ID,
 B.TITLE,
 A.AUTHOR_ID,
 A.NAME AS AUTHOR_NAME,
 S.SALES_ID,
 S.QUANTITY
FROM BOOKS AS B
RIGHT JOIN SALES AS S ON B.BOOK_ID=S.BOOK_ID
LEFT JOIN AUTHOR AS A ON B.AUTHOR_ID=A.AUTHOR_ID;

